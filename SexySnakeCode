#include <iostream>
#include <string>
#include <conio.h>
#include <windows.h>
#include <time.h>
#include <MMSystem.h>
#include <fstream>
using namespace std;
ifstream filei;
ofstream fileo;
const int w = 25; //Width for border
const int h = 29; //Height for border
int x, y, Ax, Ay;// x/y control x/y axis, Ax/Ay = Apple (food)
int score, Ehighscore, Nhighscore, Hhighscore;//score is score. E,N,H = Easy,Normal,Hard
string name, Ehighscorename, Nhighscorename, Hhighscorename;
int Tx[100], Ty[100]; // Tx/Ty represent the tail growth
int nT; // Represents tail
enum direction { STOP = 0, LEFT, RIGHT, UP, DOWN }; //Direction
direction d; //d = direction
bool gover; //This allows for a game over
bool error; //Error Detection

void gotoxy(int column, int line)//Sets cursor to selected area
{
	COORD coord;
	coord.X = column;
	coord.Y = line;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}
void set()
{
	gover = false;
	d = STOP;
	x = w / 2;//Puts snake in middle of x axis
	y = h / 2;//Puts snake in middle of y axis
	Ax = rand() % (w - 2) + 1; // Spawns food randomly on x axis
	Ay = rand() % (h - 2) + 1;//Spawns food randomly on y axis
	score = 0; // Sets the score to 0
}
void DisplayBorder()//Prints border
{
	gotoxy(0, 0);
	for (int i = 0; i < w + 2; i++)//Prints upper border
		cout << char(205);
	cout << endl;
	for (int i = 0; i < h; i++)//Prints side borders
	{
		gotoxy(0, i);
		cout << char(186);
		gotoxy(w + 2, i);
		cout << char(186);
	}
	for (int i = 0; i < w + 2; i++)//Prints bottom border
	{
		gotoxy(i, h);
		cout << char(205);
	}
}
void EraseArea(int x, int y, int width, int height)//Allows selected area to print a blank 
{
	int i, j;
	for (i = x; i < width; i++)
	{
		for (j = y; j < height; j++)
		{
			gotoxy(i, j);
			cout << " ";
		}
	}
}
void draw()
{
	EraseArea(1, 1, 25, 29);// Clears within the box walls.
	gotoxy(Ax, Ay);// display apple
	cout << char(149);//Apple (food)
	gotoxy(x, y);// display head
	cout << char(254);//Head
	for (int k = 0; k < nT; k++)// now display tail
	{
		gotoxy(Tx[k], Ty[k]);
		cout << char(254);
	}
	gotoxy(28, 0);//displays scores in selected coordinate
	cout << "S C O R E: " << score;
	gotoxy(28, 2);
	cout << "H I G H  S C O R E S";
	gotoxy(28, 3);
	cout << "E A S Y: " << Ehighscore;
	gotoxy(28, 4);
	cout << "N O R M A L: " << Nhighscore;
	gotoxy(28, 5);
	cout << "H A R D: " << Hhighscore;
	
}
void input()
{
	if (_kbhit())//recognizes when the user to input the keyboard
	{
		switch (_getch())//Takes character
		{
		case 'a':
			d = LEFT;
			break;
		case 'd':
			d = RIGHT;
			break;
		case 'w':
			d = UP;
			break;
		case 's':
			d = DOWN;
			break;
		}
	}
}
void brains()
{
	int prevx = Tx[0], prevy = Ty[0];
	int prev2x = 0, prev2y = 0;
	Tx[0] = x;//Remembers the 1st tail value on x axis
	Ty[0] = y;//Remembers the 2nd tail value on y axis
	for (int i = 1; i < nT; i++)//Remembering last tail position
	{
		prev2x = Tx[i];
		prev2y = Ty[i];
		Tx[i] = prevx;
		Ty[i] = prevy;
		prevx = prev2x;
		prevy = prev2y;
	}
	switch (d)
	{
	case LEFT:
		x--;
		break;
	case RIGHT:
		x++;
		break;
	case UP:
		y--;
		break;
	case DOWN:
		y++;
		break;
	default:
		break;
	}
	if (x > w - 1 || x < 0 || y > h - 1 || y < 0)//Snake hits wall, gameover
		gover = true;
	for (int i = 0; i < nT; i++)
	{
		if (Tx[i] == x && Ty[i] == y) // Snake hits tail, gameover
			gover = true;
	}
	if (x == Ax && y == Ay)//Ax is = to x & Ay is = to y, spawn apple
	{
		Ax = rand() % (w - 2) + 1;
		Ay = rand() % (h - 2) + 1;
		nT++;
		score += 1;//Food is eaten, score + 1
		Tx[nT - 1] = Tx[nT - 2];
		Ty[nT - 1] = Ty[nT - 2];
	}

}
void music()//Allows music to play
{
	PlaySound(TEXT("Careless.wav"), NULL, SND_FILENAME | SND_LOOP | SND_ASYNC);
}
void GOfont()
{
	cout << R"(        ___         ___         ___         ___                   ___                    ___         ___     )" << endl;
	cout << R"(       /\__\       /\  \       /\  \       /\__\                 /\  \        ___       /\__\       /\  \    )" << endl;
	cout << R"(      /:/ _/_     /::\  \     |::\  \     /:/ _/_               /::\  \      /\  \     /:/ _/_     /::\  \   )" << endl;
	cout << R"(     /:/ /\  \   /:/\:\  \    |:|:\  \   /:/ /\__\             /:/\:\  \     \:\  \   /:/ /\__\   /:/\:\__\  )" << endl;
	cout << R"(    /:/ /::\  \ /:/ /::\  \ __|:|\:\  \ /:/ /:/ _/_           /:/  \:\  \     \:\  \ /:/ /:/ _/_ /:/ /:/  /  )" << endl;
	cout << R"(   /:/__\/\:\__/:/_/:/\:\__/::::|_\:\__/:/_/:/ /\__\         /:/__/ \:\__\___  \:\__/:/_/:/ /\__/:/_/:/__/___)" << endl;
	cout << R"(   \:\  \ /:/  \:\/:/  \/__\:\~~\  \/__\:\/:/ /:/  /         \:\  \ /:/  /\  \ |:|  \:\/:/ /:/  \:\/:::::/  /)" << endl;
	cout << R"(    \:\  /:/  / \::/__/     \:\  \      \::/_/:/  /           \:\  /:/  /\:\  \|:|  |\::/_/:/  / \::/~~/~~~~ )" << endl;
	cout << R"(     \:\/:/  /   \:\  \      \:\  \      \:\/:/  /             \:\/:/  /  \:\__|:|__| \:\/:/  /   \:\~~\     )" << endl;
	cout << R"(      \::/  /     \:\__\      \:\__\      \::/  /               \::/  /    \::::/__/   \::/  /     \:\__\    )" << endl;
	cout << R"(       \/__/       \/__/       \/__/       \/__/                 \/__/      ~~~~        \/__/       \/__/    )" << endl;
}
void Easy()
{
	system("cls");
	set();
	DisplayBorder();
	while (!gover)
	{
		draw();
		input();
		brains();
		Sleep(90);

	}
	system("cls");
	if (score > Ehighscore)//Determines if your score is greater to replace high-score. If it is, it replaces to old one. This correlates with the player's name.
	{
		Ehighscore = score;
		Ehighscorename = name;
		fileo.open("EasyHighscore.txt");
		fileo << Ehighscorename << " " << Ehighscore;
		fileo.close();
	}
	GOfont();//Calls game-over font function
	cout << "\n\n\t\t\t\t\t\tYOUR SCORE IS:" << score << endl;
	cout << "\n\n\t\t\t\t\t\tCurrent High Score: " << Ehighscorename << " " << Ehighscore << endl;
	cout << "\n\n\t\t\t\t\t\tTRY AGAIN, " << name << endl;
	cout << "\n\n\t\t\t\t\t\t";
}
void Normal()
{
	system("cls");
	set();
	DisplayBorder();
	while (!gover)
	{
		draw();
		input();
		brains();
		Sleep(40);
	}
	system("cls");
	if (score > Nhighscore)//Determines if your score is greater to replace high-score. If it is, it replaces to old one. This correlates with the player's name.
	{
		Nhighscore = score;
		Nhighscorename = name;
		fileo.open("NormalHighscore.txt");
		fileo << Nhighscorename << " " << Nhighscore;
		fileo.close();
	}
	GOfont();//Calls game-over font function
	cout << "\n\n\t\t\t\t\t\tYour score is:" << score << endl;
	cout << "\n\n\t\t\t\t\t\tCurrent High Score: " << Nhighscorename << " " << Nhighscore << endl;
	cout << "\n\n\t\t\t\t\t\tTRY AGAIN, " << name << endl;
	cout << "\n\n\t\t\t\t\t\t";
}
void Hard()
{
	system("cls");
	set();
	DisplayBorder();
	while (!gover)
	{
		draw();
		input();
		brains();
		Sleep(15);
	}
	system("cls");
	if (score > Hhighscore)//Determines if your score is greater to replace high-score. If it is, it replaces to old one. This correlates with the player's name.
	{
		Hhighscore = score;
		Hhighscorename = name;
		fileo.open("HardHighscore.txt");
		fileo << Hhighscorename << " " << Hhighscore;
		fileo.close();
	}
	GOfont();//Calls game-over font function
	cout << "\n\n\t\t\t\t\t\tYour score is:" << score << endl;
	cout << "\n\n\t\t\t\t\t\tCurrent High Score: " << Hhighscorename << " " << Hhighscore << endl;
	cout << "\n\n\t\t\t\t\t\tTRY AGAIN, " << name << endl;
	cout << "\n\n\t\t\t\t\t\t";
}
void title()
{                                                                                                                                                                 
	cout << R"(   ,---.   ,------. ,--.   ,--. ,--.   ,--.      ,---.   ,--.  ,--.   ,---.   ,--. ,--. ,------. )" << endl;
	cout << R"(  '   .-'  |  .---'  \  `.'  /   \  `.'  /      '   .-'  |  ,'.|  |  /  O  \  |  .'   / |  .---' )" << endl;
	cout << R"(  `.  `-.  |  `--,    .'    \     '.    /       `.  `-.  |  |' '  | |  .-.  | |  .   '  |  `--,  )" << endl;
	cout << R"(  .-'    | |  `---.  /  .'.  \      |  |        .-'    | |  | `   | |  | |  | |  |\   \ |  `---. )" << endl;
	cout << R"(  `-----'  `------' '--'   '--'     `--'        `-----'  `--'  `--' `--' `--' `--' '--' `------' )" << endl;                                  
}
void HSfont()
{
	cout << R"(     __ _____________ __  _____________  ___  ________)" << endl;
	cout << R"(    / // /  _/ ___/ // / / __/ ___/ __ \/ _ \/ __/ __/)" << endl;
	cout << R"(   / _  _/ // (_ / _  / _\ \/ /__/ /_/ / , _/ _/_\ \  )" << endl;
	cout << R"(  /_//_/___/\___/_//_/ /___/\___/\____/_/|_/___/___/  )" << endl;
}
void Cfont()
{
	cout << R"(    _________  _  ___________  ____  __   ____)" << endl;
	cout << R"(   / ___/ __ \/ |/ /_  __/ _ \/ __ \/ /  / __/)" << endl;
	cout << R"(  / /__/ /_/ /    / / / / , _/ /_/ / /___\ \  )" << endl;
	cout << R"(  \___/\____/_/|_/ /_/ /_/|_|\____/____/___/  )" << endl;
}
int main()
{
	music();//Calls music function to play music
	srand(time(NULL));
	char c;

	filei.open("EasyHighscore.txt"); //opens file
	if (filei.is_open()) //File opens successfully, it reads the highscore and name
	{
		filei >> Ehighscorename >> Ehighscore;
		filei.close();
		error = false; //error will be false, because file opened successfully
	}
	else
	{
		Ehighscore = 0; //File doesn't exist, then highscore is set to 0, and error will be true
		error = true;
	}

	filei.open("NormalHighscore.txt"); //opens file
	if (filei.is_open()) //File opens successfully, it reads the highscore and name
	{
		filei >> Nhighscorename >> Nhighscore;
		filei.close();
		error = false; //error will be false, because file opened successfully
	}
	else
	{
		Nhighscore = 0; //File doesn't exist, then highscore is set to 0, and error will be true
		error = true;
	}

	filei.open("HardHighscore.txt"); //opens file
	if (filei.is_open()) //File opens successfully, it reads the highscore and name
	{
		filei >> Hhighscorename >> Hhighscore;
		filei.close();
		error = false; //error will be false, because file opened successfully
	}
	else
	{
		Hhighscore = 0; //File doesn't exist, then highscore is set to 0, and error will be true
		error = true;
	}

	system("Color 0A");//Changes the color of text and background in console
	title();//Calls title font function
	HSfont();//Calls High score font function
	cout << "\n\tEASY: "<< Ehighscorename << " " << Ehighscore << endl;
	cout << "\tNORMAL: " << Nhighscorename << " " << Nhighscore << endl;
	cout << "\tHARD: " << Hhighscorename << " " << Hhighscore << endl;
	Cfont();//Calls Controls font function
	cout<< "\n\tW = UP\n\tA = LEFT\n\tS = DOWN\n\tD = RIGHT" << endl;
	cout << "\tENTER YOUR NAME: ";
	cin >> name;
	cout << "\n\t1. EASY MODE" << endl;
	cout << "\n\t2. NORMAL MODE" << endl;
	cout << "\n\t3. HARD MODE" << endl;
	cout << endl;
	cin >> c;
	switch (c) //menu selections
	{
	case '1'://Represents Easy mode function
	{
		Easy();
		break;
	}
	case '2'://Represents Normal mode function
	{
		Normal();
		break;
	}
	case '3'://Represents Hard mode function
	{
		Hard();
		break;
	}
	default:
		break;
	}
	system("pause");
}
